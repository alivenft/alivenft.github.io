{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EL\\\\Documents\\\\GitHub\\\\alivenft.github.io\\\\src\\\\components\\\\BitcoinPriceTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CryptoChart from './CryptoChart';\nimport Loading from './Loading';\nimport CurrencyConverter from './CurrencyConverter';\nimport CoinTable from './CoinTable';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst intervals = {\n  '1h': 'm1',\n  '24h': 'h1',\n  '7d': 'd1',\n  '1m': 'd1',\n  '3m': 'd1',\n  '1y': 'd1'\n};\nconst BitcoinPriceTracker = () => {\n  _s();\n  const {\n    cryptoId\n  } = useParams();\n  const [data, setData] = useState([]);\n  const [interval, setInterval] = useState('1h');\n  const [crypto, setCrypto] = useState(cryptoId || 'bitcoin');\n  const [loading, setLoading] = useState(true);\n  const [cryptoList, setCryptoList] = useState([]);\n  useEffect(() => {\n    const fetchCryptoList = async () => {\n      try {\n        const response = await axios.get('https://api.coincap.io/v2/assets');\n        const enrichedCryptoList = response.data.data.map(crypto => ({\n          ...crypto,\n          changePercent24Hr: parseFloat(crypto.changePercent24Hr),\n          icon: `https://assets.coincap.io/assets/icons/${crypto.symbol.toLowerCase()}@2x.png`\n        }));\n        setCryptoList(enrichedCryptoList);\n      } catch (error) {\n        console.error('Error fetching crypto list:', error);\n      }\n    };\n    fetchCryptoList();\n  }, []);\n  useEffect(() => {\n    const fetchCryptoData = async () => {\n      setLoading(true);\n      try {\n        const startDate = interval === '1y' ? Date.now() - 365 * 24 * 60 * 60 * 1000 : interval === '3m' ? Date.now() - 90 * 24 * 60 * 60 * 1000 : interval === '1m' ? Date.now() - 30 * 24 * 60 * 60 * 1000 : interval === '7d' ? Date.now() - 7 * 24 * 60 * 60 * 1000 : interval === '24h' ? Date.now() - 24 * 60 * 60 * 1000 : Date.now() - 60 * 60 * 1000;\n        const response = await axios.get(`https://api.coincap.io/v2/assets/${crypto}/history`, {\n          params: {\n            interval: intervals[interval],\n            start: startDate,\n            end: Date.now()\n          }\n        });\n        const formattedData = response.data.data.map(point => [new Date(point.time).getTime(), parseFloat(point.priceUsd)]);\n        setData(formattedData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCryptoData();\n  }, [interval, crypto]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outer-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container text-center my-5\",\n      children: cryptoId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CurrencyConverter, {\n          crypto: crypto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(CryptoChart, {\n          data: data,\n          interval: interval,\n          setInterval: setInterval\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(CoinTable, {\n        cryptoList: cryptoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(BitcoinPriceTracker, \"AlkFpQ/t5bag96qj0XcN2/wEqqA=\", false, function () {\n  return [useParams];\n});\n_c = BitcoinPriceTracker;\nexport default BitcoinPriceTracker;\nvar _c;\n$RefreshReg$(_c, \"BitcoinPriceTracker\");","map":{"version":3,"names":["React","useState","useEffect","axios","CryptoChart","Loading","CurrencyConverter","CoinTable","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","intervals","BitcoinPriceTracker","_s","cryptoId","data","setData","interval","setInterval","crypto","setCrypto","loading","setLoading","cryptoList","setCryptoList","fetchCryptoList","response","get","enrichedCryptoList","map","changePercent24Hr","parseFloat","icon","symbol","toLowerCase","error","console","fetchCryptoData","startDate","Date","now","params","start","end","formattedData","point","time","getTime","priceUsd","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/EL/Documents/GitHub/alivenft.github.io/src/components/BitcoinPriceTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CryptoChart from './CryptoChart';\r\nimport Loading from './Loading';\r\nimport CurrencyConverter from './CurrencyConverter';\r\nimport CoinTable from './CoinTable';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst intervals = {\r\n  '1h': 'm1',\r\n  '24h': 'h1',\r\n  '7d': 'd1',\r\n  '1m': 'd1',\r\n  '3m': 'd1',\r\n  '1y': 'd1',\r\n};\r\n\r\nconst BitcoinPriceTracker = () => {\r\n  const { cryptoId } = useParams();\r\n  const [data, setData] = useState([]);\r\n  const [interval, setInterval] = useState('1h');\r\n  const [crypto, setCrypto] = useState(cryptoId || 'bitcoin');\r\n  const [loading, setLoading] = useState(true);\r\n  const [cryptoList, setCryptoList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCryptoList = async () => {\r\n      try {\r\n        const response = await axios.get('https://api.coincap.io/v2/assets');\r\n        const enrichedCryptoList = response.data.data.map(crypto => ({\r\n          ...crypto,\r\n          changePercent24Hr: parseFloat(crypto.changePercent24Hr),\r\n          icon: `https://assets.coincap.io/assets/icons/${crypto.symbol.toLowerCase()}@2x.png`,\r\n        }));\r\n        setCryptoList(enrichedCryptoList);\r\n      } catch (error) {\r\n        console.error('Error fetching crypto list:', error);\r\n      }\r\n    };\r\n\r\n    fetchCryptoList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchCryptoData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const startDate = interval === '1y' ? Date.now() - 365 * 24 * 60 * 60 * 1000 :\r\n          interval === '3m' ? Date.now() - 90 * 24 * 60 * 60 * 1000 :\r\n          interval === '1m' ? Date.now() - 30 * 24 * 60 * 60 * 1000 :\r\n          interval === '7d' ? Date.now() - 7 * 24 * 60 * 60 * 1000 :\r\n          interval === '24h' ? Date.now() - 24 * 60 * 60 * 1000 :\r\n          Date.now() - 60 * 60 * 1000;\r\n\r\n        const response = await axios.get(\r\n          `https://api.coincap.io/v2/assets/${crypto}/history`,\r\n          {\r\n            params: {\r\n              interval: intervals[interval],\r\n              start: startDate,\r\n              end: Date.now(),\r\n            },\r\n          }\r\n        );\r\n        const formattedData = response.data.data.map(point => [new Date(point.time).getTime(), parseFloat(point.priceUsd)]);\r\n        setData(formattedData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCryptoData();\r\n  }, [interval, crypto]);\r\n\r\n  return (\r\n    <div className=\"outer-container\">\r\n      <div className=\"main-container text-center my-5\">\r\n        {cryptoId ? (\r\n          <>\r\n            <CurrencyConverter crypto={crypto} />\r\n            {loading ? <Loading /> : <CryptoChart data={data} interval={interval} setInterval={setInterval} />}\r\n          </>\r\n        ) : (\r\n          <CoinTable cryptoList={cryptoList} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BitcoinPriceTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}