{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EL\\\\Documents\\\\GitHub\\\\alivenft.github.io\\\\src\\\\components\\\\LiveBTCPrice.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LiveBTCPrice = ({\n  interval\n}) => {\n  _s();\n  const [price, setPrice] = useState(null);\n  const [previousPrice, setPreviousPrice] = useState(null);\n  const [priceChangePercentage, setPriceChangePercentage] = useState(null);\n  const [color, setColor] = useState(localStorage.getItem('btcPriceColor') || '#39FF14');\n  useEffect(() => {\n    const fetchPrice = async () => {\n      try {\n        const response = await axios.get('https://api.coincap.io/v2/assets/bitcoin');\n        const newPrice = parseFloat(response.data.data.priceUsd);\n\n        // Calculate the start date based on the selected interval\n        const startDate = (() => {\n          switch (interval) {\n            case '1y':\n              return Date.now() - 365 * 24 * 60 * 60 * 1000;\n            case '3m':\n              return Date.now() - 90 * 24 * 60 * 60 * 1000;\n            case '1m':\n              return Date.now() - 30 * 24 * 60 * 60 * 1000;\n            case '7d':\n              return Date.now() - 7 * 24 * 60 * 60 * 1000;\n            case '24h':\n              return Date.now() - 24 * 60 * 60 * 1000;\n            default:\n              return Date.now() - 60 * 60 * 1000;\n            // Default to 1 hour\n          }\n        })();\n        const responseStart = await axios.get('https://api.coincap.io/v2/assets/bitcoin/history', {\n          params: {\n            interval: 'd1',\n            start: startDate,\n            end: startDate + 1000 // Add 1 second to the start to ensure we fetch only one data point\n          }\n        });\n        const startPrice = parseFloat(responseStart.data.data[0].priceUsd);\n        const newPriceChangePercentage = (newPrice - startPrice) / startPrice * 100;\n        setPreviousPrice(startPrice);\n        setPrice(newPrice);\n        if (newPriceChangePercentage !== null) {\n          setPriceChangePercentage(newPriceChangePercentage);\n          setColor(newPriceChangePercentage > 0 ? '#39FF14' : '#FF0000');\n          localStorage.setItem('btcPriceColor', newPriceChangePercentage > 0 ? '#39FF14' : '#FF0000');\n        }\n      } catch (error) {\n        console.error('Error fetching live BTC price:', error);\n      }\n    };\n    fetchPrice();\n    const intervalTimer = setInterval(fetchPrice, 10000); // Fetch every 10 seconds\n\n    return () => clearInterval(intervalTimer);\n  }, [interval]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"live-price-container bg-hackerBlack text-hackerGreen p-4 rounded-lg shadow-lg\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"live-price text-center mb-4\",\n      style: {\n        color: color\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"label font-bold mr-2\",\n        children: [\"Live BTC Price (\", interval, \"):\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"price font-bold\",\n        children: [\"$\", price ? price.toFixed(2) : 'Loading...']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), priceChangePercentage !== null && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"price-indicator font-bold ml-2\",\n        style: {\n          fontSize: '0.8rem'\n        },\n        children: [priceChangePercentage > 0 ? '▲' : '▼', \" (\", priceChangePercentage.toFixed(2), \"%)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveBTCPrice, \"BISiWwT6ZZxLNj8WFVbcw1kd+5U=\");\n_c = LiveBTCPrice;\nexport default LiveBTCPrice;\nvar _c;\n$RefreshReg$(_c, \"LiveBTCPrice\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","LiveBTCPrice","interval","_s","price","setPrice","previousPrice","setPreviousPrice","priceChangePercentage","setPriceChangePercentage","color","setColor","localStorage","getItem","fetchPrice","response","get","newPrice","parseFloat","data","priceUsd","startDate","Date","now","responseStart","params","start","end","startPrice","newPriceChangePercentage","setItem","error","console","intervalTimer","setInterval","clearInterval","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/EL/Documents/GitHub/alivenft.github.io/src/components/LiveBTCPrice.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LiveBTCPrice = ({ interval }) => {\r\n  const [price, setPrice] = useState(null);\r\n  const [previousPrice, setPreviousPrice] = useState(null);\r\n  const [priceChangePercentage, setPriceChangePercentage] = useState(null);\r\n  const [color, setColor] = useState(localStorage.getItem('btcPriceColor') || '#39FF14');\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      try {\r\n        const response = await axios.get('https://api.coincap.io/v2/assets/bitcoin');\r\n        const newPrice = parseFloat(response.data.data.priceUsd);\r\n\r\n        // Calculate the start date based on the selected interval\r\n        const startDate = (() => {\r\n          switch (interval) {\r\n            case '1y':\r\n              return Date.now() - 365 * 24 * 60 * 60 * 1000;\r\n            case '3m':\r\n              return Date.now() - 90 * 24 * 60 * 60 * 1000;\r\n            case '1m':\r\n              return Date.now() - 30 * 24 * 60 * 60 * 1000;\r\n            case '7d':\r\n              return Date.now() - 7 * 24 * 60 * 60 * 1000;\r\n            case '24h':\r\n              return Date.now() - 24 * 60 * 60 * 1000;\r\n            default:\r\n              return Date.now() - 60 * 60 * 1000; // Default to 1 hour\r\n          }\r\n        })();\r\n\r\n        const responseStart = await axios.get(\r\n          'https://api.coincap.io/v2/assets/bitcoin/history',\r\n          {\r\n            params: {\r\n              interval: 'd1',\r\n              start: startDate,\r\n              end: startDate + 1000, // Add 1 second to the start to ensure we fetch only one data point\r\n            },\r\n          }\r\n        );\r\n\r\n        const startPrice = parseFloat(responseStart.data.data[0].priceUsd);\r\n\r\n        const newPriceChangePercentage = ((newPrice - startPrice) / startPrice) * 100;\r\n\r\n        setPreviousPrice(startPrice);\r\n        setPrice(newPrice);\r\n\r\n        if (newPriceChangePercentage !== null) {\r\n          setPriceChangePercentage(newPriceChangePercentage);\r\n          setColor(newPriceChangePercentage > 0 ? '#39FF14' : '#FF0000');\r\n          localStorage.setItem('btcPriceColor', newPriceChangePercentage > 0 ? '#39FF14' : '#FF0000');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching live BTC price:', error);\r\n      }\r\n    };\r\n\r\n    fetchPrice();\r\n    const intervalTimer = setInterval(fetchPrice, 10000); // Fetch every 10 seconds\r\n\r\n    return () => clearInterval(intervalTimer);\r\n  }, [interval]);\r\n\r\n  return (\r\n    <div className=\"live-price-container bg-hackerBlack text-hackerGreen p-4 rounded-lg shadow-lg\">\r\n      <div className=\"live-price text-center mb-4\" style={{ color: color }}>\r\n        <span className=\"label font-bold mr-2\">Live BTC Price ({interval}):</span>\r\n        <span className=\"price font-bold\">${price ? price.toFixed(2) : 'Loading...'}</span>\r\n        {priceChangePercentage !== null && (\r\n          <span className=\"price-indicator font-bold ml-2\" style={{ fontSize: '0.8rem' }}>\r\n            {priceChangePercentage > 0 ? '▲' : '▼'} ({priceChangePercentage.toFixed(2)}%)\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveBTCPrice;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}