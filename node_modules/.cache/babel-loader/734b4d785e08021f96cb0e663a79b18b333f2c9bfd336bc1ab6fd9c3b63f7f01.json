{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\EL\\\\Documents\\\\GitHub\\\\alivenft.github.io\\\\src\\\\components\\\\BitcoinPriceTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CryptoChart from './CryptoChart';\nimport LivePrice from './LivePrice';\nimport bitcoinIcon from './btc.svg';\nimport ethereumIcon from './eth.svg';\nimport dogecoinIcon from './doge.svg';\nimport litecoinIcon from './ltc.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst intervals = {\n  '1h': 'm1',\n  '24h': 'h1',\n  '7d': 'd1',\n  '1m': 'd1',\n  '3m': 'd1',\n  '1y': 'd1'\n};\nconst BitcoinPriceTracker = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [interval, setInterval] = useState('1h');\n  const [crypto, setCrypto] = useState('bitcoin');\n  useEffect(() => {\n    const fetchCryptoData = async () => {\n      try {\n        const startDate = interval === '1y' ? Date.now() - 365 * 24 * 60 * 60 * 1000 : interval === '3m' ? Date.now() - 90 * 24 * 60 * 60 * 1000 : interval === '1m' ? Date.now() - 30 * 24 * 60 * 60 * 1000 : interval === '7d' ? Date.now() - 7 * 24 * 60 * 60 * 1000 : interval === '24h' ? Date.now() - 24 * 60 * 60 * 1000 : Date.now() - 60 * 60 * 1000;\n        const response = await axios.get(`https://api.coincap.io/v2/assets/${crypto}/history`, {\n          params: {\n            interval: intervals[interval],\n            start: startDate,\n            end: Date.now()\n          }\n        });\n        const formattedData = response.data.data.map(point => [new Date(point.time).getTime(), parseFloat(point.priceUsd)]);\n        setData(formattedData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchCryptoData();\n  }, [interval, crypto]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center my-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group mt-4\",\n      role: \"group\",\n      children: ['bitcoin', 'ethereum', 'dogecoin', 'litecoin'].map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCrypto(key),\n        type: \"button\",\n        className: `btn btn-light crypto-btn ${crypto === key ? 'active' : ''}`,\n        \"data-mdb-ripple-init\": true,\n        \"data-mdb-ripple-color\": \"dark\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: {\n            bitcoin: bitcoinIcon,\n            ethereum: ethereumIcon,\n            dogecoin: dogecoinIcon,\n            litecoin: litecoinIcon\n          }[key],\n          alt: `${key} icon`,\n          width: \"20\",\n          height: \"20\",\n          className: \"me-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), key.toUpperCase()]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LivePrice, {\n      crypto: crypto\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group mt-4\",\n      role: \"group\",\n      children: Object.keys(intervals).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setInterval(key),\n        type: \"button\",\n        className: `btn btn-light btn-interval ${interval === key ? 'active' : ''}`,\n        \"data-mdb-ripple-init\": true,\n        \"data-mdb-ripple-color\": \"dark\",\n        children: key\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CryptoChart, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(BitcoinPriceTracker, \"csCMf8UXofpcAE1rxQ5C36wmaBs=\");\n_c = BitcoinPriceTracker;\nexport default BitcoinPriceTracker;\nvar _c;\n$RefreshReg$(_c, \"BitcoinPriceTracker\");","map":{"version":3,"names":["React","useState","useEffect","axios","CryptoChart","LivePrice","bitcoinIcon","ethereumIcon","dogecoinIcon","litecoinIcon","jsxDEV","_jsxDEV","intervals","BitcoinPriceTracker","_s","data","setData","interval","setInterval","crypto","setCrypto","fetchCryptoData","startDate","Date","now","response","get","params","start","end","formattedData","map","point","time","getTime","parseFloat","priceUsd","error","console","className","children","role","key","onClick","type","src","bitcoin","ethereum","dogecoin","litecoin","alt","width","height","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","Object","keys","_c","$RefreshReg$"],"sources":["C:/Users/EL/Documents/GitHub/alivenft.github.io/src/components/BitcoinPriceTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport CryptoChart from './CryptoChart';\r\nimport LivePrice from './LivePrice';\r\nimport bitcoinIcon from './btc.svg';\r\nimport ethereumIcon from './eth.svg';\r\nimport dogecoinIcon from './doge.svg';\r\nimport litecoinIcon from './ltc.svg';\r\n\r\nconst intervals = {\r\n  '1h': 'm1',\r\n  '24h': 'h1',\r\n  '7d': 'd1',\r\n  '1m': 'd1',\r\n  '3m': 'd1',\r\n  '1y': 'd1',\r\n};\r\n\r\nconst BitcoinPriceTracker = () => {\r\n  const [data, setData] = useState([]);\r\n  const [interval, setInterval] = useState('1h');\r\n  const [crypto, setCrypto] = useState('bitcoin');\r\n\r\n  useEffect(() => {\r\n    const fetchCryptoData = async () => {\r\n      try {\r\n        const startDate = interval === '1y' ? Date.now() - 365 * 24 * 60 * 60 * 1000 :\r\n          interval === '3m' ? Date.now() - 90 * 24 * 60 * 60 * 1000 :\r\n          interval === '1m' ? Date.now() - 30 * 24 * 60 * 60 * 1000 :\r\n          interval === '7d' ? Date.now() - 7 * 24 * 60 * 60 * 1000 :\r\n          interval === '24h' ? Date.now() - 24 * 60 * 60 * 1000 :\r\n          Date.now() - 60 * 60 * 1000;\r\n\r\n        const response = await axios.get(\r\n          `https://api.coincap.io/v2/assets/${crypto}/history`,\r\n          {\r\n            params: {\r\n              interval: intervals[interval],\r\n              start: startDate,\r\n              end: Date.now(),\r\n            },\r\n          }\r\n        );\r\n        const formattedData = response.data.data.map(point => [new Date(point.time).getTime(), parseFloat(point.priceUsd)]);\r\n        setData(formattedData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchCryptoData();\r\n  }, [interval, crypto]);\r\n\r\n  return (\r\n    <div className=\"container text-center my-5\">\r\n      <div className=\"btn-group mt-4\" role=\"group\">\r\n        {['bitcoin', 'ethereum', 'dogecoin', 'litecoin'].map(key => (\r\n          <button \r\n            key={key} \r\n            onClick={() => setCrypto(key)} \r\n            type=\"button\"\r\n            className={`btn btn-light crypto-btn ${crypto === key ? 'active' : ''}`}\r\n            data-mdb-ripple-init\r\n            data-mdb-ripple-color=\"dark\"\r\n          >\r\n            <img src={{ bitcoin: bitcoinIcon, ethereum: ethereumIcon, dogecoin: dogecoinIcon, litecoin: litecoinIcon }[key]} alt={`${key} icon`} width=\"20\" height=\"20\" className=\"me-2\" />\r\n            {key.toUpperCase()}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <LivePrice crypto={crypto} />\r\n      <div className=\"btn-group mt-4\" role=\"group\">\r\n        {Object.keys(intervals).map(key => (\r\n          <button \r\n            key={key} \r\n            onClick={() => setInterval(key)} \r\n            type=\"button\"\r\n            className={`btn btn-light btn-interval ${interval === key ? 'active' : ''}`}\r\n            data-mdb-ripple-init\r\n            data-mdb-ripple-color=\"dark\"\r\n          >\r\n            {key}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <CryptoChart data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BitcoinPriceTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}